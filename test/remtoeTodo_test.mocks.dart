// Mocks generated by Mockito 5.4.4 from annotations
// in todo_task/test/remtoeTodo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_task/Features/Todo/Data/DataSource/remote.dart' as _i4;
import 'package:todo_task/Features/Todo/Data/Model/todoModel.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteTodoImp].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteTodoImp extends _i1.Mock implements _i4.RemoteTodoImp {
  MockRemoteTodoImp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i2.Dio);

  @override
  set dio(_i2.Dio? _dio) => super.noSuchMethod(
        Invocation.setter(
          #dio,
          _dio,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Either<Exception, _i3.Unit>> addTask({
    required String? userid,
    required String? task,
    bool? completed,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [],
          {
            #userid: userid,
            #task: task,
            #completed: completed,
          },
        ),
        returnValue: _i5.Future<_i3.Either<Exception, _i3.Unit>>.value(
            _FakeEither_1<Exception, _i3.Unit>(
          this,
          Invocation.method(
            #addTask,
            [],
            {
              #userid: userid,
              #task: task,
              #completed: completed,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<Exception, _i3.Unit>>);

  @override
  _i5.Future<_i3.Either<Exception, _i3.Unit>> deleteTask(
          {required String? taskid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#taskid: taskid},
        ),
        returnValue: _i5.Future<_i3.Either<Exception, _i3.Unit>>.value(
            _FakeEither_1<Exception, _i3.Unit>(
          this,
          Invocation.method(
            #deleteTask,
            [],
            {#taskid: taskid},
          ),
        )),
      ) as _i5.Future<_i3.Either<Exception, _i3.Unit>>);

  @override
  _i5.Future<_i3.Either<Exception, _i6.TodoModel>> getTasks({
    required String? userid,
    String? limit,
    String? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {
            #userid: userid,
            #limit: limit,
            #skip: skip,
          },
        ),
        returnValue: _i5.Future<_i3.Either<Exception, _i6.TodoModel>>.value(
            _FakeEither_1<Exception, _i6.TodoModel>(
          this,
          Invocation.method(
            #getTasks,
            [],
            {
              #userid: userid,
              #limit: limit,
              #skip: skip,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<Exception, _i6.TodoModel>>);

  @override
  _i5.Future<_i3.Either<Exception, _i3.Unit>> updateTask({
    required String? taskid,
    bool? completed,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {
            #taskid: taskid,
            #completed: completed,
          },
        ),
        returnValue: _i5.Future<_i3.Either<Exception, _i3.Unit>>.value(
            _FakeEither_1<Exception, _i3.Unit>(
          this,
          Invocation.method(
            #updateTask,
            [],
            {
              #taskid: taskid,
              #completed: completed,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<Exception, _i3.Unit>>);
}
